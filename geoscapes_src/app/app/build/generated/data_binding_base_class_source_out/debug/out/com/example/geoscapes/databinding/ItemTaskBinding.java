// Generated by view binder compiler. Do not edit!
package com.example.geoscapes.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.geoscapes.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemTaskBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final View activeBorder;

  @NonNull
  public final ImageView dropdownArrow;

  @NonNull
  public final RecyclerView stepsRecyclerView;

  @NonNull
  public final View taskColor;

  @NonNull
  public final TextView taskTextView;

  private ItemTaskBinding(@NonNull ConstraintLayout rootView, @NonNull View activeBorder,
      @NonNull ImageView dropdownArrow, @NonNull RecyclerView stepsRecyclerView,
      @NonNull View taskColor, @NonNull TextView taskTextView) {
    this.rootView = rootView;
    this.activeBorder = activeBorder;
    this.dropdownArrow = dropdownArrow;
    this.stepsRecyclerView = stepsRecyclerView;
    this.taskColor = taskColor;
    this.taskTextView = taskTextView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemTaskBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemTaskBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_task, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemTaskBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.activeBorder;
      View activeBorder = ViewBindings.findChildViewById(rootView, id);
      if (activeBorder == null) {
        break missingId;
      }

      id = R.id.dropdownArrow;
      ImageView dropdownArrow = ViewBindings.findChildViewById(rootView, id);
      if (dropdownArrow == null) {
        break missingId;
      }

      id = R.id.stepsRecyclerView;
      RecyclerView stepsRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (stepsRecyclerView == null) {
        break missingId;
      }

      id = R.id.taskColor;
      View taskColor = ViewBindings.findChildViewById(rootView, id);
      if (taskColor == null) {
        break missingId;
      }

      id = R.id.taskTextView;
      TextView taskTextView = ViewBindings.findChildViewById(rootView, id);
      if (taskTextView == null) {
        break missingId;
      }

      return new ItemTaskBinding((ConstraintLayout) rootView, activeBorder, dropdownArrow,
          stepsRecyclerView, taskColor, taskTextView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
